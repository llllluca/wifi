#!/bin/sh 

list() {
    local rescan=""
    for opt in $@; do
        case $opt in
            -r | --rescan) 
                rescan="--rescan yes" 
                ;;
            *) 
                echo "Error: \`${opt}' is an invalid option for list subcommand." >&2
                exit 1
                ;;
        esac
    done
    nmcli --pretty device wifi list $rescan
}

connect() {
    local name=$1
    # NetworkManager stores all network configuration as "connections", 
    # see `nmcli connection show' for a list of saved connections.
    # Try to active an already configured connection with name "$name",
    # return non zero on error (e.g. connection with name "$name" dosn't exist).
    nmcli connection up id "$name" > /dev/null 2> /dev/null 
    local exit_status="$?"
    if [ ! "$exit_status" -eq 0 ]; then
        # Connect to a Wi-Fi network specified by SSID or BSSID 
        # and its configuration as a "connection".
        # See `nmcli device wifi list' for SSID or BSSID and
        # see `nmcli connection show' for configured connection.
        nmcli --ask --pretty device wifi connect "$name"
        exit_status="$?"
    fi

    if [ "$exit_status" -eq 0 ]; then
        echo "Connection '${name}' successfully activated."
    fi
}

down() {
    local name="$1"
    local INTERFACE="wlp3s0"
    if [ -z "$name" ]; then 
        # Find name of the connection active on "$INTERFACE"
        name=$(nmcli --terse --fields NAME,DEVICE connection show --active | \
            grep $INTERFACE | cut --delimiter : --fields 1)
    fi
    nmcli connection down id "$name" > /dev/null
    if [ "$?" -eq 0 ]; then
        echo "Connection '${name}' successfully deactivated."
    fi
}

usage() {
    echo "Usage: \`\$ wifi <subcmd>'"
    echo "<subcmd> ::="
    echo "           | help | --help | -h"
    echo "           | list [--rescan or -r]"
    echo "           | connect <name>"
    echo "           | down [<name>]"
    echo "           | config"
    echo "           | off"
    echo "           | on"
}


case $1 in
       list) shift; list "$@" ;;
    connect) shift; connect "$@" ;;
       down) shift; down "$@" ;;
     config) nm-connection-editor 1> /dev/null 2> /dev/null & ;;
         on)  nmcli radio wifi on ;; # Turn wifi on
        off) nmcli radio wifi off ;; # Turn wifi off
         help | --help | -h | "") usage ;;
    *)
        echo "Error: \`$1' is an invalid subcommand." >&2
        exit 1
esac
